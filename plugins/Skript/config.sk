#     __________________________________________________________
#    / /                                                   / /\ \
#    \_\___________________________________________________\_\/ /
#        / /    _____    __            __                    / /
#       / /    / ____\  / /           /_/          /\       / /
#      / /    / /__    / /___  ___   __  ______ __/ /_     / /
#     / /     \___ \  /   __/ / __\ / / / __  //_  __/    / /
#    / /     ____/ / / /\ \  / /   / / / /_/ /  / /      / /
#   / /     \_____/ /_/ /_/ /_/   /_/ / ____/  /_/      / /__
#  / /    ========================== / / ==========    / / \ \
# | |                               /_/               | |   | |
#  \_\_________________________________________________\_\_/_/
#
# == Introduction ==
# This file contains Skript's general options. To write scripts, create a new .sk file in the scripts folder or edit any existing one.
#
# Script files prefixed with a hyphen (-) will not be loaded, e.g. renaming 'plant with hoe.sk' to '-plant with hoe.sk' will disable the whole file.
# This can e.g. be used to temporarily disable scripts and is also used for Skript's example scripts.
# You can also use the command '/skript enable/disable <script>' to enable/disable a script which will automatically rename it.
#
# === !!! PLEASE NOTE !!! ===
# This file, all scripts and other files ending in .sk are NOT .yml/YAML files, but very similar!
# Please remember the following when editing files:
# - To indent sections you can use spaces like in YAML, but tabs are also allowed. Just remember to stick to the one or the other for a section/trigger.
# - '#' starts a comment like in YAML. If you don't want it to start a comment simply double it: '##' (You also have to double these in "quoted text")
# - If you use special characters (§, äöü, éèàôç, ñ, etc.) you have to encode the file in UTF-8.
#



# ==== General Options ====

language: english

# Updates
check for new version: false
update check interval: 12 hours
release channel: stable

# Effect commands
enable effect commands: true
effect command token: !
allow ops to use effect commands: true

player variable fix: true

use player UUIDs in variable names: true

date format: default

# Plugin settings
verbosity: normal
plugin priority: high

log player commands: false

number accuracy: 2

maximum target block distance: 100

case sensitive: false

# Warning
disable variable will not be saved warnings: true
disable variable missing and/or warnings: true
disable starting a variable's name with an expression warnings: true
soft api exceptions: false
# Allows Skript to ignore certain actions which would normally result in thrown exceptions.
# If everything works correctly, you should keep this option disabled. It might cause problems in some cases.
# However, if Skript or addons of it are not working correctly, this might help.
# You may also get told to enable this by Skript or addon developers - then do so.

enable timings: true

parse links in chat messages: lenient

color codes reset formatting: true

keep command last usage dates: false

script loader thread size: 0
# Enables asynchronous script loading, which will load scripts in the background instead of blocking the server to load scripts.
# Setting this to a value of 0 or lower will disabled asynchronous loading, and all scripts will be loaded on the main server thread.
# Setting this to a value of 1 will enabled asynchronous loading, which won't block the main server.
# Setting this to a value of 2 or higher will enable parallel loading as well as asynchronous loading,
#   which will distribute the loading of scripts over multiple threads. This could cause issues if your scripts depend on
#   their loading order (function definitions are always loaded in advance, so they won't be affected).
# You may also set this option to 'processor count' (without apostrophes) to use the number of available processors.
# Do note that though, this option may cause issues with addons and possibly some scripts! Do NOT enable this option unless you have really long
#   script load times AND you take the risk of lost data and full responsibility!

disable hooks:
	vault: false
	regions:
		grief prevention: false
		precious stones: false
		residence: false
		worldguard: false
		# Controls whether Skript should attempt to hook into the plugins listed above.
		# If you change a setting here while the server is running, a restart is required for that change to take effect.
		# Do note that some addons may stop Skript from hooking into a plugin, even if the plugin's hook is not disabled here.
		
player name regex pattern: [a-zA-Z0-9_]{1,16}
# A regex pattern that is used to match player names.
# This can be used if you are using Geyser, where some usernames are prefixed by a certain character.

# ==== Variables ====

databases:
	# Databases to store variables in. These can either be used as a simple one-server-storage
	# where variables are written constantly but only read at server start,
	# or as a connection between multiple servers by monitoring the database(s) for changes.
	#
	# You can define as many databases as you want, just make sure to choose a distinct name for each one, and don't forget to set all options correctly.
	#
	# To be able to use a database you'll need to download the plugin 'SQLibrary' from https://dev.bukkit.org/projects/sqlibrary/files
	# and install it in your server's plugin directory like other plugins.
	#
	# Please note that '/skript reload' will not reload this section, i.e. you'll have to restart Skript for changes to take effect.
	
	# Each database definition must be in a separate section. You can choose any name for the sections, as long as it's not already used.
	database 1:
		# An example database to describe all possible options.
		
		type: disabled
		# The type of this database. Allowed values are 'CSV', 'SQLite', 'MySQL' and 'disabled'.
		# CSV uses a text file to store the variables, while SQLite and MySQL use databases, and 'disabled' makes Skript ignore the database as if it wasn't defined at all.
		
		pattern: .*
		# Defines which variables to save in this database.
		# This pattern uses Regex syntax, e.g. use 'db_.*' (without the quotes) to store all variables prefixed with 'db_' in this database,
		# or use '.*' (the default value) to store all variables here (recommended for the last database in this list, as otherwise some variables might not be saved).
		# Please note that variables are only stored in one database, and databases are checked from top to bottom,
		# e.g. if a variable matches the topmost database's pattern it will be saved there and nowhere else.
		# BTW: Patterns are checked in a separate thread, i.e. your server likely won't run slower when using complicated patterns.
		
		monitor changes: false
		monitor interval: 20 seconds
		# If 'monitor changes' is set to true, variables will repeatedly be checked for updates in the database (in intervals set in 'monitor interval').
		# ! Please note that you should set 'pattern', 'monitor changes' and 'monitor interval' to the same values on all servers that access the same database!
		
		# == MySQL configuration ==
		host: localhost# Where the database server is located at, e.g. 'example.com', 'localhost', or '192.168.1.100'
		port: 3306# 3306 is MySQL's default port, i.e. you likely won't need to change this value
		user: root
		password: pass
		database: skript# The database to use, the table will be created in this database.
		table: variables21# The name of the table to create. 'variables21' is the default name, if this was to be omitted.
		# (If the table exists but is defined differently that how Skript expects it to be you'll get errors and no variables will be saved and/or loaded)
		# == SQLite/CSV configuration ==
		file: ./plugins/Skript/variables.db
		# Where to save the variables to. For a CSV file, the file extension '.csv' is recommended, but not required, but SQLite database files must end in '.db' (SQLibrary forces this).
		# The file path can either be absolute (e.g. 'C:\whatever\...' [Windows] or '/usr/whatever/...' [Unix]), or relative to the server directory (e.g. './plugins/Skript/...').
		
		#table: variables21
		# The name of the table to create. 'variables21' is the default name, if this was to be omitted.
		# (If the table exists but is defined differently that how Skript expects it to be you'll get errors and no variables will be saved and/or loaded)
		# This is generally not required as the the .db file will only be used by Skript, unless you want to split different variables into different tables
		
		backup interval: 2 hours
		# Creates a backup of the file every so often. This can be useful if you ever want to revert variables to an older state.
		# Variables are saved constantly no matter what is set here, thus a server crash will never make you loose any variables.
		# Set this to 0 to disable this feature.
		
		
	MySQL example:
		# A MySQL database example, with options unrelated to MySQL removed.
		
		type: disabled# change to line below to enable this database
		# type: MySQL
		
		pattern: synced_.*# this pattern will save all variables that start with 'synced_' in this MySQL database.
		
		host: localhost
		port: 3306
		user: root
		password: pass
		database: skript
		table: variables21
		
		monitor changes: true
		monitor interval: 20 seconds
		
	SQLite example:
		# An SQLite database example.
		
		type: disabled# change to line below to enable this database
		# type: SQLite
		
		pattern: db_.*# this pattern will save all variables that start with 'db_' in this SQLite database.
		
		file: ./plugins/Skript/variables.db
		# SQLite databases must end in '.db'
		#table: variables21
		# Usually not required, if omitted defaults to variables21 (see above for more details)
		
		backup interval: 0# 0 = don't create backups
		monitor changes: false
		monitor interval: 20 seconds
		
	default:
		# The default "database" is a simple text file, with each variable on a separate line and the variable's name, type, and value separated by commas.
		# This is the last database in this list to catch all variables that have not been saved anywhere else.
		# You can modify this database freely, but make sure to know what you're doing if you don't want to loose any variables.
		
		type: CSV
		
		pattern: .*
		
		file: ./plugins/Skript/variables.csv
		
		backup interval: 2 hours
		
		# PS: If you don't want some variables to be saved in any database (e.g. variables that contain an %entity% which usually despawn when the server is shut down)
		# you can modify the last database's pattern to not match all variables, e.g. use '(?!x_).*' to match all variables that don't start with 'x_'.
		# Be very cautious when doing this however as unsaved variables cannot be recovered after the server has been stopped.
		# I recommend to use a single character to denote unsaved variables (similar to local variables' '_'), e.g. '-', in which case the last database's pattern should be '(?!-).*'.
		
		
		
		# ==== Settings that should not be changed ====
		
version: 2.6.3
# DO NOT CHANGE THIS VALUE MANUALLY!
# This saves for which version of Skript this configuration was written for.
# If it does not match the version of the .jar file then the config will be updated automatically.
