options:
  hologram_location: -1603.5, 83.05, 991.4
  stand_location: -1602.5, 82, 992

function Player_ChoosingCharacterState_OtherCategoriesButton_createButton(player: player):
  # Button location
  set {_location::hologram} to location at {@hologram_location} in world "world"

  # Creating hologram
  create hologram with lines "&lДополнительно", "&9&lда" at {_location::hologram} and store it in {_hologram}
  add {_hologram} to {garbage::holograms::*}

  set {%{_player}%::ChoosingCharacterState::OtherCategoriesButton::hologram} to {_hologram}

  # Hologram settings
  make hologram {_hologram} invisible by default
  reveal hologram {_hologram} to {_player}

  # Creating interactable armor stand
  set {_location::stand} to location at {@stand_location} in world "world"

  spawn 1 armor stand at {_location::stand}
  set {_stand} to last spawned armor stand
  add {_stand} to {garbage::entities::*}

  # Armor stand nbt
  add "{NoGravity:1,Invisible:1}" to nbt of {_stand}

  # Starting worker
  while true is true:
    if {_player} is offline:
      set {_action} to "stop"

    if {%{_player}%::ChoosingCharacterState::state} is not "editing":
      set {_action} to "stop"

    if {%{_player}%::state} isn't "choosing_character":
      set {_action} to "stop"

    # Stop action
    if {_action} is "stop":
      # Deleting hologram
      delete hologram {_hologram}
      kill {_stand}
      stop

    # Checking if player is looking at this hologram or no
    if {_player}'s target is {_stand}:
      set {_state} to "hovered"
      set {_stateLocked} to true

      set {%{_player}%::ChoosingCharacterState::isHovering} to true
    else:
      set {_state} to "not_hovered"

      if {_stateLocked} is true:
        delete {_stateLocked}
        set {%{_player}%::ChoosingCharacterState::isHovering} to false

    # Updating state
    Player_ChoosingCharacterState_OtherCategoriesButton_updateState({_player}, {_state})

    # Checking if player pressed this button or no
    if {_state} is "hovered":
      if {%{_player}%::ChoosingCharacterState::pressed} is true:
        delete {%{_player}%::ChoosingCharacterState::pressed}
        Player_ChoosingCharacterState_OtherCategoriesButton_updateState({_player}, "pressed")

    wait 1 tick

function Player_ChoosingCharacterState_OtherCategoriesButton_updateState(player: player, state: string):
  # Getting hologram
  set {_hologram} to {%{_player}%::ChoosingCharacterState::OtherCategoriesButton::hologram}

  if {_state} is "hovered":
    if size of all lines of hologram {_hologram} < 3:
      # Updating hologram
      set line 3 of hologram {_hologram} to "&a&l/ &f&lРедактировать"
  
  else if {_state} is "not_hovered":
    # Checking last line of hologram
    if size of all lines of hologram {_hologram} >= 3:
      delete line 3 of hologram {_hologram}

  else if {_state} is "pressed":
    # Opening editing menu
    Player_ChoosingCharacterState_OtherCategoriesButton_openMenu({_player})

function Player_ChoosingCharacterState_OtherCategoriesButton_openMenu(player: player):
  # Opening virtual menu to this player
  open chest inventory with 6 rows named "Другие категории" to {_player}

  # Default items
  set {_item} to quartz named "&f"
  add "{TextureId:""empty""}" to item-nbt of {_item}

  loop numbers between 0 and 59:
    set slot loop-value of {_player}'s current inventory to {_item}

  # Skills
  set {_skillsButton::items::*} to Player_ChoosingCharacterState_OtherCategories_getSkillsButtonItem()
  set {_skillsButton::main} to {_skillsButton::items::1}
  set {_skillsButton::filler} to {_skillsButton::items::2}

  set slot 10 of {_player}'s current inventory to {_skillsButton::main}

  # Filler slots
  set slots 11,12, 19,20,21 of {_player}'s current inventory to {_skillsButton::filler}

# Listening to inventory click events
on inventory click:
  if name of player's current inventory contains "Другие категории":
    cancel event

    # Getting information about this button
    set {_function} to tag "ButtonFunction" of item-nbt of event-item
    
    if {_function} is set:
      # Preparing variables for funciton
      set {_player} to player

      # Calling function
      evaluate "%{_function}%"